// Generated by CoffeeScript 1.9.3
var Browserify, BrowserifyPlugin, envify, exorcistStream, fs, getNpmDir, getNpmDirForPackage, npm, path, ref, stringify, strung,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

npm = (ref = share.Npm) != null ? ref : Npm;

Browserify = npm.require('browserify');

envify = npm.require('envify/custom');

exorcistStream = npm.require('exorcist-stream');

strung = npm.require('strung');

fs = Plugin.fs;

path = Plugin.path;

stringify = npm.require('json-stringify-safe');

getNpmDirForPackage = function(isopackCache, name, basedirOption) {
  var build, builds, i, len, npmCache, packageName, pkg, root;
  pkg = isopackCache._packageMap._map[name];
  if (pkg.kind === 'local') {
    npmCache = pkg.packageSource.npmCacheDirectory;
    if (basedirOption != null) {
      return npmCache.slice(0, -12);
    } else {
      return npmCache;
    }
  } else {
    if (basedirOption != null) {
      root = isopackCache._tropohouse.root;
      packageName = name.replace(':', '_');
      return path.join(root, 'packages', packageName, pkg.version, 'web.browser', basedirOption);
    }
    builds = isopackCache._isopacks[name].unibuilds;
    for (i = 0, len = builds.length; i < len; i++) {
      build = builds[i];
      if (build.nodeModulesPath != null) {
        return build.nodeModulesPath.slice(0, -12);
      }
    }
  }
};

getNpmDir = function(file, basedirOption) {
  var isopackCache, packageName, ref1;
  packageName = file.getPackageName();
  isopackCache = file._resourceSlot.packageSourceBatch.processor.isopackCache;
  if (packageName != null) {
    return getNpmDirForPackage(isopackCache, packageName, basedirOption);
  } else if (((ref1 = isopackCache._packageMap._map) != null ? ref1['npm-container'] : void 0) != null) {
    return getNpmDirForPackage(isopackCache, 'npm-container');
  } else {
    return basedirOption != null ? basedirOption : '.';
  }
};

BrowserifyPlugin = (function(superClass) {
  extend(BrowserifyPlugin, superClass);

  function BrowserifyPlugin() {
    BrowserifyPlugin.__super__.constructor.call(this, {
      compilerName: 'CosmosBrowserify',
      defaultCacheSize: 1024 * 1024 * 10
    });
  }

  BrowserifyPlugin.prototype.isRoot = function(file) {
    return file.getExtension() === 'browserify.js';
  };

  BrowserifyPlugin.prototype.getCacheKey = function(file) {
    return [file.getSourceHash(), file.getFileOptions()];
  };

  BrowserifyPlugin.prototype.compileResultSize = function(compileResult) {
    return compileResult.source.length + compileResult.sourceMap.length;
  };

  BrowserifyPlugin.prototype.addCompileResult = function(file, compileResult) {
    return file.addJavaScript({
      path: file.getPathInPackage(),
      sourcePath: file.getPathInPackage(),
      data: compileResult.source,
      sourceMap: compileResult.sourceMap
    });
  };

  BrowserifyPlugin.prototype.getOptionInfo = function(file, files) {
    var option, optionFileKey, optionInputFile, packageName, tail;
    packageName = file.getPackageName();
    if (packageName == null) {
      packageName = '';
    }
    tail = file.getPathInPackage().slice(0, -2) + 'options.json';
    optionFileKey = "{" + packageName + "}/" + tail;
    optionInputFile = files.get(optionFileKey);
    return option = {
      input: optionInputFile,
      ref: optionInputFile != null ? [optionFileKey] : [],
      "package": file.getFileOptions()
    };
  };

  BrowserifyPlugin.prototype.compileOneFile = function(file, files) {
    var browserify, browserifyOptions, bundle, compileResult, e, i, len, option, ref1, specialOptions, which;
    option = this.getOptionInfo(file, files);
    try {
      browserifyOptions = this.getBrowserifyOptions(file, option);
      specialOptions = {};
      ref1 = ['ignore', 'external', 'exclude', 'plugin'];
      for (i = 0, len = ref1.length; i < len; i++) {
        which = ref1[i];
        specialOptions[which] = browserifyOptions[which];
        delete browserifyOptions[which];
      }
      browserify = Browserify([this.getReadable(file)], browserifyOptions);
      this.applySpecialOptions(browserify, browserifyOptions, specialOptions);
      this.applyTransforms(browserify, browserifyOptions);
      bundle = this.getBundle(browserify, file);
      compileResult = this.getCompileResult(bundle);
      return {
        compileResult: compileResult,
        referencedImportPaths: option.ref
      };
    } catch (_error) {
      e = _error;
      file.error({
        message: e.message + '\n' + this.buildErrorMessage(e, option, browserifyOptions, specialOptions)
      });
    }
  };

  BrowserifyPlugin.prototype.applySpecialOptions = function(browserify, browserifyOptions, options) {
    var i, it, len, name, ref1, results, which, whichOptions;
    ref1 = ['ignore', 'external', 'exclude', 'plugin'];
    results = [];
    for (i = 0, len = ref1.length; i < len; i++) {
      which = ref1[i];
      if (options[which] != null) {
        results.push((function() {
          var j, len1, ref2, results1;
          ref2 = options[which];
          results1 = [];
          for (j = 0, len1 = ref2.length; j < len1; j++) {
            it = ref2[j];
            if (typeof it === 'string') {
              results1.push(browserify[which](it, {
                basedir: browserifyOptions.basedir
              }));
            } else if (typeof it === 'object') {
              results1.push((function() {
                var results2;
                results2 = [];
                for (name in it) {
                  whichOptions = it[name];
                  if (whichOptions.basedir == null) {
                    whichOptions.basedir = browserifyOptions.basedir;
                  }
                  results2.push(browserify[which](name, whichOptions));
                }
                return results2;
              })());
            } else {
              results1.push(void 0);
            }
          }
          return results1;
        })());
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  BrowserifyPlugin.prototype.applyTransforms = function(browserify, browserifyOptions) {
    var envifyOptions, ref1, transformName, transformOptions;
    envifyOptions = browserifyOptions.transforms.envify;
    delete browserifyOptions.transforms.envify;
    ref1 = browserifyOptions.transforms;
    for (transformName in ref1) {
      if (!hasProp.call(ref1, transformName)) continue;
      transformOptions = ref1[transformName];
      browserify.transform(transformName, transformOptions);
    }
    browserify.transform(envify(envifyOptions));
  };

  BrowserifyPlugin.prototype.buildErrorMessage = function(error, option, browserifyOptions, specialOptions) {
    var basedir, basedirExists, dir, match, module, moduleCheckMessage, moduleExists, nodeModulesExists, regex;
    regex = /Cannot find module '(.*)' from '(.*)'/;
    match = regex.exec(error.toString());
    if ((match != null ? match[2] : void 0) != null) {
      module = match[1];
      basedir = match[2];
      dir = basedir;
      basedirExists = fs.existsSync(dir) ? 'yes' : 'MISSING';
      dir = path.join(dir, 'node_modules');
      nodeModulesExists = fs.existsSync(dir) ? 'yes' : 'MISSING';
      dir = path.join(dir, module);
      moduleExists = fs.existsSync(dir) ? 'yes' : 'MISSING';
      moduleCheckMessage = "\nMissing module check:\n>  basedir exists     : " + basedirExists + "\n>  node_modules exists: " + nodeModulesExists + "\n>  module exists      : " + moduleExists + "\n";
    } else {
      moduleCheckMessage = '';
    }
    return moduleCheckMessage + "\nBrowserify options:\n>  " + (stringify(browserifyOptions, null, '>  ')) + "\n\nSpecial options:\n>  " + (stringify(specialOptions, null, '>  '));
  };

  BrowserifyPlugin.prototype.getBundle = function(browserify, file) {
    var bundle, exorcisedBundle, sourceMapStream;
    bundle = browserify.bundle();
    bundle.setEncoding('utf8');
    sourceMapStream = strung();
    exorcisedBundle = bundle.pipe(exorcistStream(sourceMapStream, file.getDisplayPath()));
    exorcisedBundle.originalBundle = bundle;
    exorcisedBundle.sourceMapStream = sourceMapStream;
    return exorcisedBundle;
  };

  BrowserifyPlugin.prototype.getCompileResult = function(bundle) {
    var result;
    result = {
      source: this.getString(bundle)
    };
    result.sourceMap = bundle.sourceMapStream.string;
    return result;
  };

  BrowserifyPlugin.prototype.getBrowserifyOptions = function(file, option) {
    var basedirOption, defaultOptions, ref1, ref2, ref3, userOptions;
    defaultOptions = {
      debug: true,
      transforms: {
        envify: {
          NODE_ENV: this.getDebug() ? 'development' : 'production',
          _: 'purge'
        }
      }
    };
    userOptions = {};
    if ((option != null ? option.input : void 0) != null) {
      userOptions = JSON.parse(option.input.getContentsAsString());
    }
    basedirOption = (ref1 = userOptions.basedir) != null ? ref1 : option != null ? (ref2 = option["package"]) != null ? ref2.basedir : void 0 : void 0;
    if (file.__basedir != null) {
      userOptions.basedir = file.__basedir;
    } else {
      userOptions.basedir = Plugin.convertToOSPath(path.resolve(getNpmDir(file, basedirOption)));
      file.__basedir = userOptions.basedir;
    }
    _.defaults(userOptions, option["package"], defaultOptions);
    if ((ref3 = userOptions.transforms) != null) {
      if (ref3.envify == null) {
        ref3.envify = defaultOptions.transforms.envify;
      }
    }
    return userOptions;
  };

  BrowserifyPlugin.prototype.getDebug = function() {
    var debug, i, key, len, ref1;
    debug = true;
    ref1 = process.argv;
    for (i = 0, len = ref1.length; i < len; i++) {
      key = ref1[i];
      if (key === 'bundle' || key === 'build') {
        debug = indexOf.call(process.argv, '--debug') >= 0;
        break;
      }
    }
    return debug;
  };

  BrowserifyPlugin.prototype.getReadable = function(file) {
    var string;
    string = file.getContentsAsString();
    return strung((string != null ? string.length : void 0) > 0 ? string : '\n');
  };

  BrowserifyPlugin.prototype.getString = Meteor.wrapAsync(function(bundle, cb) {
    var source;
    source = strung();
    source.on('finish', function() {
      return cb(void 0, source.string);
    });
    source.on('error', cb);
    bundle.originalBundle.once('error', cb);
    bundle.sourceMapStream.once('error', cb);
    bundle.once('error', cb);
    return bundle.pipe(source);
  });

  return BrowserifyPlugin;

})(MultiFileCachingCompiler);

Plugin.registerCompiler({
  extensions: ['browserify.js', 'browserify.options.json']
}, function() {
  return new BrowserifyPlugin();
});

share.BrowserifyPlugin = BrowserifyPlugin;
